#!/usr/bin/env python3
import time
import json
import requests
import random
from threading import Thread

videos = {
    "爱情": ("aiqing", 60, "a", [
        "“爱情是两个人的旅程，需要相互扶持和理解。”",
        "“爱是一种感觉，需要用心去体会和经营。”",
        "“爱情不是占有，而是彼此尊重和信任。”",
        "“真正的爱情是不求回报的付出和关怀。”",
        "“爱情需要勇气和决心，才能跨越困难和挑战。”",
        "“爱是一份责任和承诺，需要用行动去证明。”",
        "“爱情需要包容和宽容，才能长久地维持下去。”",
        "“真正的爱情是相互成就和成长的过程。”",
        "“爱情需要沟通和理解，才能解决矛盾和问题。”",
        "“爱是一种奉献和牺牲，需要用真诚的心去对待。”",
        "“爱情需要时间和耐心，才能培养出深厚的感情。”",
        "“爱是一种感受和体验，需要用心去品味和享受。”",
        "“真正的爱情是无私的付出和关怀，不求回报。”",
        "“爱情需要共同的目标和价值观，才能走得更远更稳定。”",
        "“爱是一种力量和动力，能够激励人们前行和奋斗。”",
        "“爱情需要相互支持和鼓励，在困难时刻挺身而出。”",
        "“爱是一种信仰和精神追求，能够带给人们无限的力量和勇气。”",
        "“真正的爱情是相互理解和包容，不计较得失和过错。”",
        "“爱情需要不断地经营和维护，才能够保持新鲜感和激情。”",
        "“爱是一种美好而神圣的情感，值得我们用心去珍惜和呵护。”",
    ]),
    "宠物": ("chongwu", 20, "c", [
        "好可爱的宠物啊!~",
        "小狗第一次学会了接球",
        "猫咪在沙发上打盹儿的样子好可爱",
        "狗狗和主人一起玩滑板车",
        "小鸟在笼子里唱歌，好像在给主人表演",
        "猫咪偷偷溜进厨房偷吃鱼肉",
        "狗狗看到主人回家后高兴地摇尾巴",
        "小兔子跳起来咬住胡萝卜的样子好有趣",
        "猫咪在阳台上晒太阳，享受悠闲时光",
        "狗狗和主人一起散步，欣赏美景",
        "小鸟飞到树枝上，开始啄食果实",
        "猫咪在主人面前装可爱，博取注意",
        "狗狗追着蝴蝶跑，好开心啊！",
        "小猫在床上打滚，摆出一副慵懒的样子",
        "狗狗看到主人拿出玩具，兴奋不已",
        "小鸟站在窗台上欣赏风景，好像在思考什么",
        "猫咪在主人面前卖萌，想要得到食物奖励",
        "狗狗和主人一起玩水枪，玩得不亦乐乎！",
        "小猫躲在箱子里睡觉，好像做了一个美梦",
        "狗狗看到主人拿出相机，立刻摆出各种可爱的姿势",
    ]),
    "美食": ("meishi", 40, "s", [
        "美食瞬间：一口咬下的幸福",
        "香气四溢：家常菜的诱惑",
        "味蕾狂欢：辣炸鸡翅的诱惑",
        "甜蜜滋味：巧克力蛋糕的浪漫",
        "舌尖上的旅行：世界各地美食探秘",
        "美食DIY:教你做出美味佳肴",
        "厨房小能手：快速学会简单菜谱",
        "美食分享：与朋友一起品尝美食",
        "餐桌上的艺术：优雅摆盘展示美食",
        "美食探店：寻找城市里的隐藏美食",
        "食材学堂：了解各种食材的小知识",
        "美食故事：品味背后的故事与传说",
        "健康饮食：打造美丽与健康的完美结合",
        "美食挑战：尝试突破自己的味蕾极限",
        "节日美食：感受节日气氛的特色美食",
        "网红美食：跟着潮流品尝热门美食",
        "美食拍摄：用镜头记录下美味瞬间",
        "美食时光：在慢生活中品味美好的味道",
        "名厨访谈：与知名厨师分享烹饪心得",
        "美食地图：探索城市中的美食宝藏",
    ]),
    "默剧": ("moju", 30, "m", [
        "默剧小品：笑中带泪的表演艺术",
        "无声胜有声：默剧带你领略另一种表演方式",
        "手势舞动，心灵相通：默剧的独特魅力",
        "眼神交流，情感传递：默剧表演的艺术技巧",
        "表情丰富，动作传神：默剧演员的必备技能",
        "舞台上的沉默者：默剧表演的神秘与惊喜",
        "用心演绎，用情呈现：默剧作品中的感人故事",
        "幽默搞笑，意味深长：默剧作品中的双重意义",
        "简单却深刻：默剧作品中的哲学思考",
        "瞬间感动，长久回味：默剧作品中的经典之作",
        "视觉盛宴，心灵震撼：默剧作品中的视听体验",
        "舞台上的魔术师：默剧表演的神奇之处",
        "人物塑造，形象生动：默剧作品中的人物刻画",
        "意境营造，氛围渲染：默剧作品中的舞台设计",
        "情感表达，思想传达：默剧作品中的主题探讨",
        "创意无限，想象丰富：默剧作品中的创新元素",
        "传统与现代的碰撞：默剧作品中的文化融合",
        "跨越时空的对话：默剧作品中的文化交流",
        "从心出发，从艺至终：默剧艺术家的坚持与追求",
        "无声世界里的绚丽多彩：默剧作品中的艺术魅力",
    ]),
    "煽情": ("shanqing", 60, "q", [
        "爱在心间：一段跨越时空的感人爱情故事",
        "亲情至上：一个家庭为了孩子付出一切的故事",
        "生命的意义：一位身患绝症的病人如何面对生死的故事",
        "心灵的呼唤：一只流浪狗与主人之间的感人故事",
        "希望的力量：一位失去双腿的残疾人如何战胜困难的故事",
        "爱的奉献：一对志愿者夫妇为偏远山区孩子带来希望的故事",
        "梦想成真：一位年轻人追逐音乐梦想的故事",
        "勇敢面对：一位女孩如何在困境中坚强前行的故事",
        "感恩的心：一位老人回忆往事，感恩家人和朋友的故事",
        "爱的传递：一位义工帮助他人的故事",
        "友情长存：一群好友经历风雨，情谊不渝的故事",
        "人性的光辉：一位普通人在危难时刻表现出的人性光辉的故事",
        "生命的奇迹：一位新生儿的生命之路",
        "心灵的救赎：一位罪犯在狱中找到自我救赎的故事",
        "爱的坚守：一对夫妻在婚姻中经历风风雨雨的故事",
        "勇气与坚持：一位运动员克服伤病，坚持追梦的故事",
        "信仰的力量：一位信徒在信仰中找到力量和勇气的故事",
        "人生的意义：一位老人对人生的思考和感悟的故事",
        "爱与责任：一位母亲为了孩子的未来不断努力奋斗的故事",
        "梦想启航：一位年轻人踏上创业之路的故事",
    ]),
    "小妙招": ("miaozhao", 40, "x", [
        "让你的鞋子永不变形",
        "轻松去除衣物上的汗渍",
        "快速去除墙上污渍",
        "让你的指甲更健康亮丽",
        "让你的冰箱更加保鲜",
        "让你的洗发水更加持久留香",
        "让你的花草更加茂盛生长",
        "让你的水杯更加耐用不易破损",
        "让你的手机电池更加持久使用时间",
        "让你的衣服更加容易熨烫平整",
        "让你的烤箱更加容易清洗",
        "让你的空气净化器更加有效过滤空气",
        "让你的咖啡机更加容易清洁和维护",
        "让你的厨房刀具更加耐用锋利",
        "让你的洗衣机更加省水省电",
        "让你的汽车更加省油省钱",
        "让你的家庭更加整洁有序",
        "让你的健康更加有保障",
        "让你的心情更加愉悦舒畅",
        "让你的生活更加美好幸福",
    ]),
    "神曲": ("music", 99, "y1", [
        "一首动人的情歌",
        "一段激情四溢的舞蹈",
        "一支优美的小提琴独奏",
        "一场震撼人心的交响乐演出",
        "一段动感十足的街舞表演",
        "一支欢快的流行歌曲合唱团",
        "一段令人陶醉的钢琴独奏",
        "一场华丽的管弦乐演奏会",
        "一段感人至深的古典吉他演奏",
        "一支热情洋溢的摇滚乐队演出",
        "一段充满创意的音乐视频制作过程",
        "一位歌手在录音棚内的真实生活",
        "一段令人心旷神怡的自然风光拍摄",
        "一支充满活力的电子音乐团队演出",
        "一场精彩绝伦的现场音乐会",
        "一位音乐家在舞台上的独特表现力",
        "一段充满情感的音乐剧表演",
        "一支以创新和实验为主的现代音乐团队",
        "一段充满魔幻色彩的音乐短片",
        "一位歌手用自己的方式演绎经典老歌",
    ]),
    "杂": ("musicc", 180, "y2", [
        "探索不同风格的音乐世界",
        "感受歌曲中的情感表达",
        "了解不同乐器的演奏技巧和特点",
        "跟上最新的音乐潮流和热门歌曲",
        "领略经典乐曲的魅力和艺术价值",
        "感受音乐的力量和激情",
        "体验优雅与自由的结合",
        "感受未来科技的音乐魅力",
        "了解不同文化背景下的传统音乐形式",
        "学习如何正确发声和保护嗓子",
        "感受人声合唱的独特魅力",
        "学习简单的吉他弹唱技巧",
        "了解口琴的历史和演奏技巧",
        "欣赏鼓手的精湛技艺和节奏感",
        "学习钢琴、电子琴等键盘乐器的演奏技巧",
        "动手制作自己的原创音乐作品",
        "品味经典名曲和优秀新作品",
        "感受现场演出的震撼与感动",
        "了解音乐教育的重要性和方法",
        "享受精彩的音乐盛宴和文化体验",
    ])
}
users = {
}

url = "https://byte-hunters.oss-cn-hangzhou.aliyuncs.com/%s/%d.mp4"
base = "http://localhost:23724/douyin"


def rand_user(arg):
    for i in range(arg[1] / 10):
        res = requests.post(base + "/user/register", params={
            "username": arg[0] + str(i),
            "password": "ByteHunters20230724"
        }).json()
        users[arg[0]].append(res['user_id'])
        time.sleep(0.5)
    print(arg[0], "用户注册完成")


def rand_video(arg):
    msg = arg[3]
    for i in range(arg[1]):
        d = {
            "id": random.choice(users[arg[0]]),
            "url": url % (arg[2], i + 1),
            "title": random.choice(msg),
        }
        res = requests.post(base + "/publish/actionUrl", data=json.dumps(d))
        if res.json()["status_code"] != 0:
            print(arg[0], i + 1, "失败")
    time.sleep(60 / arg[1])


def user():
    Threads = []
    for video in videos:
        t = Thread(target=rand_user, args=(videos[video],))
        Threads.append(t)
        t.start()
    for t in Threads:
        t.join()


def video():
    Threads = []
    for video in videos:
        t = Thread(target=rand_video, args=(videos[video],))
        Threads.append(t)
        t.start()
    for t in Threads:
        t.join()


if __name__ == "__main__":
    user()
    video()
    print("结束")
